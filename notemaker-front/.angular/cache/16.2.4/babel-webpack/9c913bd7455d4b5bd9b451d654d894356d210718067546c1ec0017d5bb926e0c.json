{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(authService, router, route) {\n    this.authService = authService;\n    this.router = router;\n    this.route = route;\n    this.user = {}; // An object to store user input (email and password)\n  }\n\n  onSubmit() {\n    // Call the login method from AuthService\n    this.authService.login(this.user).subscribe(response => {\n      // Successful login\n      localStorage.setItem('token', response.token);\n      localStorage.setItem(\"email\", response.email);\n      window.location.href = \"\";\n      // Store the token in local storage (you might want to handle this differently in a real app)\n      // Redirect to a protected route or any other logic after successful login\n      // For example, you can use Angular's Router to navigate to another page.\n    }, error => {\n      // Handle login error, display a message to the user, or perform other actions.\n      console.error('Login failed:', error);\n      // You can also reset the form or display an error message to the user.\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 17,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"ngSubmit\"], [\"loginForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"username\", \"name\", \"username\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"routerLink\", \"/register\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\", 4);\n        i0.ɵɵtext(7, \"Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.user.username = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 6);\n        i0.ɵɵtext(11, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.user.password = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"button\", 8);\n        i0.ɵɵtext(14, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"a\", 9);\n        i0.ɵɵtext(16, \"Register\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(4);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.username);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.password);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !_r0.valid);\n      }\n    },\n    dependencies: [i2.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["LoginComponent","constructor","authService","router","route","user","onSubmit","login","subscribe","response","localStorage","setItem","token","email","window","location","href","error","console","_","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","ActivatedRoute","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginComponent_Template_form_ngSubmit_3_listener","LoginComponent_Template_input_ngModelChange_8_listener","$event","username","LoginComponent_Template_input_ngModelChange_12_listener","password","ɵɵadvance","ɵɵproperty","_r0","valid"],"sources":["D:\\notemaker-front\\src\\app\\login\\login.component.ts","D:\\notemaker-front\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  user: any = {}; // An object to store user input (email and password)\n\n  constructor(private authService: AuthService,private router:Router,private route:ActivatedRoute) {}\n\n  onSubmit() {\n    // Call the login method from AuthService\n    this.authService.login(this.user).subscribe(\n      (response: any) => {\n        // Successful login\n        localStorage.setItem('token', response.token);\n        localStorage.setItem(\"email\",response.email);\n        window.location.href=\"\";\n        // Store the token in local storage (you might want to handle this differently in a real app)\n        // Redirect to a protected route or any other logic after successful login\n        // For example, you can use Angular's Router to navigate to another page.\n      },\n      (error: any) => {\n        // Handle login error, display a message to the user, or perform other actions.\n        console.error('Login failed:', error);\n        // You can also reset the form or display an error message to the user.\n      }\n    );\n  }\n}\n\n","<div class=\"container\">\n    <h2>Login</h2>\n    <form (ngSubmit)=\"onSubmit()\" #loginForm=\"ngForm\">\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" class=\"form-control\" id=\"username\" name=\"username\" [(ngModel)]=\"user.username\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"password\">Password:</label>\n            <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" [(ngModel)]=\"user.password\" required>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">Login</button>\n        <a routerLink=\"/register\">Register</a>\n    </form>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}